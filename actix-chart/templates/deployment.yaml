apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "actix-devops-web.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ include "actix-devops-web.name" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "actix-devops-web.name" . }}
  template:
    metadata:
      labels:
        app: {{ include "actix-devops-web.name" . }}
    spec:
      # containers:
      #   - name: {{ include "actix-devops-web.name" . }}
      #     image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
      #     imagePullPolicy: {{ .Values.image.pullPolicy }}
      #     ports:
      #       - containerPort: 8080
      #     env:
      #       - name: DATABASE_URL
      #         value: "{{ .Values.env.DATABASE_URL }}"
      #     readinessProbe:
      #       tcpSocket:
      #         port: 8080
      #       initialDelaySeconds: 5
      #       periodSeconds: 10
      #     livenessProbe:
      #       tcpSocket:
      #         port: 8080
      #       initialDelaySeconds: 10
      #       periodSeconds: 15

containers:
  - name: actix-devops-web
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    imagePullPolicy: {{ .Values.image.pullPolicy }}
    ports:
      - containerPort: 8080
    env:
      - name: DATABASE_URL
        value: "{{ .Values.env.DATABASE_URL }}"
    command:
      - sh
      - -c
      - |
        echo "Waiting for Postgres..."
        until pg_isready -h actix-postgres -U postgres; do
          sleep 2
        done
        echo "Postgres ready, starting Actix..."
        /usr/local/bin/app
